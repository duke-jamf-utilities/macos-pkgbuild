#!/bin/sh

##
# Duke JAMF Package Workflow Utility
# https://github.com/duke-jamf/scripts
#
# Tests a package build against its definition.
##

if [ $# -lt 1 ]; then
    echo "Usage: verify {path/to/definition} [target_volume]"
    exit 1
fi

SCRIPTS=`dirname "$0"`
DEFINITION="$1"
MANIFEST="$DEFINITION/.manifest"
TARGET="$2"
if [ ! "$TARGET" ]; then
	TARGET="/"
fi

# Load variables from the definition
. "$DEFINITION/variables"

# Get the package from the manifest
if [ ! -f "$MANIFEST" ]; then
	echo "Unable to locate the build manifest: $MANIFEST"
	exit 2
fi

PKGNAME=`tail -n 1 "$MANIFEST"`
PKGFILE="$DEFINITION/$PKGNAME"
if [ ! -f "$PKGFILE" ]; then
	echo "Unable to locate the package: $PKGFILE"
	exit 3
fi

# Verify it's a legit package
installer -pkginfo -pkg "$PKGFILE"
RESULT=$?
if [ $RESULT -ne 0 ]; then
	exit $RESULT
fi

# Attempt installation
installer -target / -pkg "$PKGFILE"
RESULT=$?
if [ $RESULT -ne 0 ]; then
	echo "Package failed to install"
	exit $RESULT
fi

# Check for a custom verification script
if [ -x "$DEFINITION/verify" ]; then
	sh "$DEFINITION/verify"
	RESULT=$?
	if [ $RESULT -ne 0 ]; then
		exit $RESULT
	fi

	echo "Verified (custom) package: $PKGFILE"
	exit 0
fi

# Try to launch any apps specified by the payload
for APP in `pkgutil --payload-files "$PKGFILE" | awk '/.\.app$/{ print $0 }'`; do
	if [ -d "$TARGET$APP" ]; then
		APPNAME=`basename "$TARGET$APP"`

		# Ignore very popular embedded autoupdate apps
		if [ "$APPNAME" = "Autoupdate.app" ]; then
			break
		fi

		echo "Attempting to launch $APPNAME..."
		open "$TARGET$APP"
		RESULT=$?
		if [ $RESULT -ne 0 ]; then
			echo "Unable to launch $APPNAME at $TARGET$APP"
			exit $RESULT
		fi

		# Attempt to quit the app
		killall "$APPNAME" > /dev/null 2>&1
	fi
done

echo "Verified (basic) package: $PKGFILE"
exit 0
